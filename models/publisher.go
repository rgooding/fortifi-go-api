// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Publisher Publisher
//
// swagger:model Publisher
type Publisher struct {
	Entity

	// accepted terms
	AcceptedTerms string `json:"acceptedTerms,omitempty"`

	// account manager fid
	AccountManagerFid string `json:"accountManagerFid,omitempty"`

	// approved
	Approved bool `json:"approved,omitempty"`

	// brand fid
	BrandFid string `json:"brandFid,omitempty"`

	// company name
	CompanyName string `json:"companyName,omitempty"`

	// contact name
	ContactName string `json:"contactName,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// email fid
	EmailFid string `json:"emailFid,omitempty"`

	// foundation fid
	FoundationFid string `json:"foundationFid,omitempty"`

	// is disabled
	IsDisabled string `json:"isDisabled,omitempty"`

	// payout type
	PayoutType string `json:"payoutType,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// phone fid
	PhoneFid string `json:"phoneFid,omitempty"`

	// suspended
	Suspended string `json:"suspended,omitempty"`

	// type
	Type PublisherType `json:"type,omitempty"`

	// website
	Website string `json:"website,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Publisher) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Entity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Entity = aO0

	// AO1
	var dataAO1 struct {
		AcceptedTerms string `json:"acceptedTerms,omitempty"`

		AccountManagerFid string `json:"accountManagerFid,omitempty"`

		Approved bool `json:"approved,omitempty"`

		BrandFid string `json:"brandFid,omitempty"`

		CompanyName string `json:"companyName,omitempty"`

		ContactName string `json:"contactName,omitempty"`

		Email string `json:"email,omitempty"`

		EmailFid string `json:"emailFid,omitempty"`

		FoundationFid string `json:"foundationFid,omitempty"`

		IsDisabled string `json:"isDisabled,omitempty"`

		PayoutType string `json:"payoutType,omitempty"`

		Phone string `json:"phone,omitempty"`

		PhoneFid string `json:"phoneFid,omitempty"`

		Suspended string `json:"suspended,omitempty"`

		Type PublisherType `json:"type,omitempty"`

		Website string `json:"website,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AcceptedTerms = dataAO1.AcceptedTerms

	m.AccountManagerFid = dataAO1.AccountManagerFid

	m.Approved = dataAO1.Approved

	m.BrandFid = dataAO1.BrandFid

	m.CompanyName = dataAO1.CompanyName

	m.ContactName = dataAO1.ContactName

	m.Email = dataAO1.Email

	m.EmailFid = dataAO1.EmailFid

	m.FoundationFid = dataAO1.FoundationFid

	m.IsDisabled = dataAO1.IsDisabled

	m.PayoutType = dataAO1.PayoutType

	m.Phone = dataAO1.Phone

	m.PhoneFid = dataAO1.PhoneFid

	m.Suspended = dataAO1.Suspended

	m.Type = dataAO1.Type

	m.Website = dataAO1.Website

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Publisher) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AcceptedTerms string `json:"acceptedTerms,omitempty"`

		AccountManagerFid string `json:"accountManagerFid,omitempty"`

		Approved bool `json:"approved,omitempty"`

		BrandFid string `json:"brandFid,omitempty"`

		CompanyName string `json:"companyName,omitempty"`

		ContactName string `json:"contactName,omitempty"`

		Email string `json:"email,omitempty"`

		EmailFid string `json:"emailFid,omitempty"`

		FoundationFid string `json:"foundationFid,omitempty"`

		IsDisabled string `json:"isDisabled,omitempty"`

		PayoutType string `json:"payoutType,omitempty"`

		Phone string `json:"phone,omitempty"`

		PhoneFid string `json:"phoneFid,omitempty"`

		Suspended string `json:"suspended,omitempty"`

		Type PublisherType `json:"type,omitempty"`

		Website string `json:"website,omitempty"`
	}

	dataAO1.AcceptedTerms = m.AcceptedTerms

	dataAO1.AccountManagerFid = m.AccountManagerFid

	dataAO1.Approved = m.Approved

	dataAO1.BrandFid = m.BrandFid

	dataAO1.CompanyName = m.CompanyName

	dataAO1.ContactName = m.ContactName

	dataAO1.Email = m.Email

	dataAO1.EmailFid = m.EmailFid

	dataAO1.FoundationFid = m.FoundationFid

	dataAO1.IsDisabled = m.IsDisabled

	dataAO1.PayoutType = m.PayoutType

	dataAO1.Phone = m.Phone

	dataAO1.PhoneFid = m.PhoneFid

	dataAO1.Suspended = m.Suspended

	dataAO1.Type = m.Type

	dataAO1.Website = m.Website

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this publisher
func (m *Publisher) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Publisher) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this publisher based on the context it is used
func (m *Publisher) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Publisher) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Publisher) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Publisher) UnmarshalBinary(b []byte) error {
	var res Publisher
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
