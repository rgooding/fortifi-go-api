// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PropertyBulkSetPayload Set Many Properties
//
// swagger:model PropertyBulkSetPayload
type PropertyBulkSetPayload struct {

	// Additional information to store
	DecrementCounters []*KeyValuePayload `json:"decrementCounters"`

	// Additional information to store
	Flags []*KeyValuePayload `json:"flags"`

	// Additional information to store
	IncrementCounters []*KeyValuePayload `json:"incrementCounters"`

	// Additional information to store
	Values []*KeyValuePayload `json:"values"`
}

// Validate validates this property bulk set payload
func (m *PropertyBulkSetPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDecrementCounters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementCounters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PropertyBulkSetPayload) validateDecrementCounters(formats strfmt.Registry) error {
	if swag.IsZero(m.DecrementCounters) { // not required
		return nil
	}

	for i := 0; i < len(m.DecrementCounters); i++ {
		if swag.IsZero(m.DecrementCounters[i]) { // not required
			continue
		}

		if m.DecrementCounters[i] != nil {
			if err := m.DecrementCounters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("decrementCounters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("decrementCounters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PropertyBulkSetPayload) validateFlags(formats strfmt.Registry) error {
	if swag.IsZero(m.Flags) { // not required
		return nil
	}

	for i := 0; i < len(m.Flags); i++ {
		if swag.IsZero(m.Flags[i]) { // not required
			continue
		}

		if m.Flags[i] != nil {
			if err := m.Flags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("flags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PropertyBulkSetPayload) validateIncrementCounters(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementCounters) { // not required
		return nil
	}

	for i := 0; i < len(m.IncrementCounters); i++ {
		if swag.IsZero(m.IncrementCounters[i]) { // not required
			continue
		}

		if m.IncrementCounters[i] != nil {
			if err := m.IncrementCounters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incrementCounters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("incrementCounters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PropertyBulkSetPayload) validateValues(formats strfmt.Registry) error {
	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this property bulk set payload based on the context it is used
func (m *PropertyBulkSetPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDecrementCounters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementCounters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PropertyBulkSetPayload) contextValidateDecrementCounters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DecrementCounters); i++ {

		if m.DecrementCounters[i] != nil {

			if swag.IsZero(m.DecrementCounters[i]) { // not required
				return nil
			}

			if err := m.DecrementCounters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("decrementCounters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("decrementCounters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PropertyBulkSetPayload) contextValidateFlags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Flags); i++ {

		if m.Flags[i] != nil {

			if swag.IsZero(m.Flags[i]) { // not required
				return nil
			}

			if err := m.Flags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("flags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PropertyBulkSetPayload) contextValidateIncrementCounters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IncrementCounters); i++ {

		if m.IncrementCounters[i] != nil {

			if swag.IsZero(m.IncrementCounters[i]) { // not required
				return nil
			}

			if err := m.IncrementCounters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incrementCounters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("incrementCounters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PropertyBulkSetPayload) contextValidateValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Values); i++ {

		if m.Values[i] != nil {

			if swag.IsZero(m.Values[i]) { // not required
				return nil
			}

			if err := m.Values[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PropertyBulkSetPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PropertyBulkSetPayload) UnmarshalBinary(b []byte) error {
	var res PropertyBulkSetPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
