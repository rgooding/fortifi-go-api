// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subscription Generic Response
//
// swagger:model Subscription
type Subscription struct {
	Entity

	// amount
	Amount float32 `json:"amount,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	AutoCancelDate strfmt.DateTime `json:"autoCancelDate,omitempty"`

	// auto charge
	AutoCharge bool `json:"autoCharge,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	AutoSuspendDate strfmt.DateTime `json:"autoSuspendDate,omitempty"`

	// cancel days
	CancelDays int32 `json:"cancelDays,omitempty"`

	// cancel reason
	CancelReason string `json:"cancelReason,omitempty"`

	// currency
	Currency string `json:"currency,omitempty"`

	// Interval in ISO 8601 standard
	Cycle string `json:"cycle,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	DateCancelled strfmt.DateTime `json:"dateCancelled,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	DateInactive strfmt.DateTime `json:"dateInactive,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	DateModified strfmt.DateTime `json:"dateModified,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	DateStateChanged strfmt.DateTime `json:"dateStateChanged,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	DateSuspended strfmt.DateTime `json:"dateSuspended,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	DateUpgraded strfmt.DateTime `json:"dateUpgraded,omitempty"`

	// discount
	Discount float32 `json:"discount,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// Unique External Identifier for this subscription
	ExternalReference string `json:"externalReference,omitempty"`

	// An identity for this subscription, this is a non unique identfier
	Identity string `json:"identity,omitempty"`

	// invoice fid
	InvoiceFid string `json:"invoiceFid,omitempty"`

	// is paid
	IsPaid bool `json:"isPaid,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	LastRenewDate strfmt.DateTime `json:"lastRenewDate,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	NextPaymentDate strfmt.DateTime `json:"nextPaymentDate,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	NextRenewDate strfmt.DateTime `json:"nextRenewDate,omitempty"`

	// next renewal amount
	NextRenewalAmount float32 `json:"nextRenewalAmount,omitempty"`

	// offer fid
	OfferFid string `json:"offerFid,omitempty"`

	// paid renewals
	PaidRenewals int32 `json:"paidRenewals,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	PaidUntil strfmt.DateTime `json:"paidUntil,omitempty"`

	// parent fid
	ParentFid string `json:"parentFid,omitempty"`

	// price fid
	PriceFid string `json:"priceFid,omitempty"`

	// product fid
	ProductFid string `json:"productFid,omitempty"`

	// product manager type
	ProductManagerType string `json:"productManagerType,omitempty"`

	// quantity
	Quantity int32 `json:"quantity,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	RenewDate strfmt.DateTime `json:"renewDate,omitempty"`

	// renewal advance days
	RenewalAdvanceDays int32 `json:"renewalAdvanceDays,omitempty"`

	// setup amount
	SetupAmount float32 `json:"setupAmount,omitempty"`

	// setup discount
	SetupDiscount float32 `json:"setupDiscount,omitempty"`

	// should cancel
	ShouldCancel bool `json:"shouldCancel,omitempty"`

	// should suspend
	ShouldSuspend bool `json:"shouldSuspend,omitempty"`

	// sku fid
	SkuFid string `json:"skuFid,omitempty"`

	// The FID of the object that created this subscription (most commonly, order fid)
	SourceFid string `json:"sourceFid,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// status
	Status PurchaseStatus `json:"status,omitempty"`

	// suspend days
	SuspendDays int32 `json:"suspendDays,omitempty"`

	// suspend reason
	SuspendReason string `json:"suspendReason,omitempty"`

	// tax amount
	TaxAmount float32 `json:"taxAmount,omitempty"`

	// total amount
	TotalAmount float32 `json:"totalAmount,omitempty"`

	// total renewals
	TotalRenewals int32 `json:"totalRenewals,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	TrialEndDate strfmt.DateTime `json:"trialEndDate,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	TrialStartDate strfmt.DateTime `json:"trialStartDate,omitempty"`

	// Licence Key / Membership Number
	UniqueReference string `json:"uniqueReference,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Subscription) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Entity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Entity = aO0

	// AO1
	var dataAO1 struct {
		Amount float32 `json:"amount,omitempty"`

		AutoCancelDate strfmt.DateTime `json:"autoCancelDate,omitempty"`

		AutoCharge bool `json:"autoCharge,omitempty"`

		AutoSuspendDate strfmt.DateTime `json:"autoSuspendDate,omitempty"`

		CancelDays int32 `json:"cancelDays,omitempty"`

		CancelReason string `json:"cancelReason,omitempty"`

		Currency string `json:"currency,omitempty"`

		Cycle string `json:"cycle,omitempty"`

		DateCancelled strfmt.DateTime `json:"dateCancelled,omitempty"`

		DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

		DateInactive strfmt.DateTime `json:"dateInactive,omitempty"`

		DateModified strfmt.DateTime `json:"dateModified,omitempty"`

		DateStateChanged strfmt.DateTime `json:"dateStateChanged,omitempty"`

		DateSuspended strfmt.DateTime `json:"dateSuspended,omitempty"`

		DateUpgraded strfmt.DateTime `json:"dateUpgraded,omitempty"`

		Discount float32 `json:"discount,omitempty"`

		EndDate strfmt.DateTime `json:"endDate,omitempty"`

		ExternalReference string `json:"externalReference,omitempty"`

		Identity string `json:"identity,omitempty"`

		InvoiceFid string `json:"invoiceFid,omitempty"`

		IsPaid bool `json:"isPaid,omitempty"`

		LastRenewDate strfmt.DateTime `json:"lastRenewDate,omitempty"`

		NextPaymentDate strfmt.DateTime `json:"nextPaymentDate,omitempty"`

		NextRenewDate strfmt.DateTime `json:"nextRenewDate,omitempty"`

		NextRenewalAmount float32 `json:"nextRenewalAmount,omitempty"`

		OfferFid string `json:"offerFid,omitempty"`

		PaidRenewals int32 `json:"paidRenewals,omitempty"`

		PaidUntil strfmt.DateTime `json:"paidUntil,omitempty"`

		ParentFid string `json:"parentFid,omitempty"`

		PriceFid string `json:"priceFid,omitempty"`

		ProductFid string `json:"productFid,omitempty"`

		ProductManagerType string `json:"productManagerType,omitempty"`

		Quantity int32 `json:"quantity,omitempty"`

		RenewDate strfmt.DateTime `json:"renewDate,omitempty"`

		RenewalAdvanceDays int32 `json:"renewalAdvanceDays,omitempty"`

		SetupAmount float32 `json:"setupAmount,omitempty"`

		SetupDiscount float32 `json:"setupDiscount,omitempty"`

		ShouldCancel bool `json:"shouldCancel,omitempty"`

		ShouldSuspend bool `json:"shouldSuspend,omitempty"`

		SkuFid string `json:"skuFid,omitempty"`

		SourceFid string `json:"sourceFid,omitempty"`

		StartDate strfmt.DateTime `json:"startDate,omitempty"`

		Status PurchaseStatus `json:"status,omitempty"`

		SuspendDays int32 `json:"suspendDays,omitempty"`

		SuspendReason string `json:"suspendReason,omitempty"`

		TaxAmount float32 `json:"taxAmount,omitempty"`

		TotalAmount float32 `json:"totalAmount,omitempty"`

		TotalRenewals int32 `json:"totalRenewals,omitempty"`

		TrialEndDate strfmt.DateTime `json:"trialEndDate,omitempty"`

		TrialStartDate strfmt.DateTime `json:"trialStartDate,omitempty"`

		UniqueReference string `json:"uniqueReference,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Amount = dataAO1.Amount

	m.AutoCancelDate = dataAO1.AutoCancelDate

	m.AutoCharge = dataAO1.AutoCharge

	m.AutoSuspendDate = dataAO1.AutoSuspendDate

	m.CancelDays = dataAO1.CancelDays

	m.CancelReason = dataAO1.CancelReason

	m.Currency = dataAO1.Currency

	m.Cycle = dataAO1.Cycle

	m.DateCancelled = dataAO1.DateCancelled

	m.DateCreated = dataAO1.DateCreated

	m.DateInactive = dataAO1.DateInactive

	m.DateModified = dataAO1.DateModified

	m.DateStateChanged = dataAO1.DateStateChanged

	m.DateSuspended = dataAO1.DateSuspended

	m.DateUpgraded = dataAO1.DateUpgraded

	m.Discount = dataAO1.Discount

	m.EndDate = dataAO1.EndDate

	m.ExternalReference = dataAO1.ExternalReference

	m.Identity = dataAO1.Identity

	m.InvoiceFid = dataAO1.InvoiceFid

	m.IsPaid = dataAO1.IsPaid

	m.LastRenewDate = dataAO1.LastRenewDate

	m.NextPaymentDate = dataAO1.NextPaymentDate

	m.NextRenewDate = dataAO1.NextRenewDate

	m.NextRenewalAmount = dataAO1.NextRenewalAmount

	m.OfferFid = dataAO1.OfferFid

	m.PaidRenewals = dataAO1.PaidRenewals

	m.PaidUntil = dataAO1.PaidUntil

	m.ParentFid = dataAO1.ParentFid

	m.PriceFid = dataAO1.PriceFid

	m.ProductFid = dataAO1.ProductFid

	m.ProductManagerType = dataAO1.ProductManagerType

	m.Quantity = dataAO1.Quantity

	m.RenewDate = dataAO1.RenewDate

	m.RenewalAdvanceDays = dataAO1.RenewalAdvanceDays

	m.SetupAmount = dataAO1.SetupAmount

	m.SetupDiscount = dataAO1.SetupDiscount

	m.ShouldCancel = dataAO1.ShouldCancel

	m.ShouldSuspend = dataAO1.ShouldSuspend

	m.SkuFid = dataAO1.SkuFid

	m.SourceFid = dataAO1.SourceFid

	m.StartDate = dataAO1.StartDate

	m.Status = dataAO1.Status

	m.SuspendDays = dataAO1.SuspendDays

	m.SuspendReason = dataAO1.SuspendReason

	m.TaxAmount = dataAO1.TaxAmount

	m.TotalAmount = dataAO1.TotalAmount

	m.TotalRenewals = dataAO1.TotalRenewals

	m.TrialEndDate = dataAO1.TrialEndDate

	m.TrialStartDate = dataAO1.TrialStartDate

	m.UniqueReference = dataAO1.UniqueReference

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Subscription) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Amount float32 `json:"amount,omitempty"`

		AutoCancelDate strfmt.DateTime `json:"autoCancelDate,omitempty"`

		AutoCharge bool `json:"autoCharge,omitempty"`

		AutoSuspendDate strfmt.DateTime `json:"autoSuspendDate,omitempty"`

		CancelDays int32 `json:"cancelDays,omitempty"`

		CancelReason string `json:"cancelReason,omitempty"`

		Currency string `json:"currency,omitempty"`

		Cycle string `json:"cycle,omitempty"`

		DateCancelled strfmt.DateTime `json:"dateCancelled,omitempty"`

		DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

		DateInactive strfmt.DateTime `json:"dateInactive,omitempty"`

		DateModified strfmt.DateTime `json:"dateModified,omitempty"`

		DateStateChanged strfmt.DateTime `json:"dateStateChanged,omitempty"`

		DateSuspended strfmt.DateTime `json:"dateSuspended,omitempty"`

		DateUpgraded strfmt.DateTime `json:"dateUpgraded,omitempty"`

		Discount float32 `json:"discount,omitempty"`

		EndDate strfmt.DateTime `json:"endDate,omitempty"`

		ExternalReference string `json:"externalReference,omitempty"`

		Identity string `json:"identity,omitempty"`

		InvoiceFid string `json:"invoiceFid,omitempty"`

		IsPaid bool `json:"isPaid,omitempty"`

		LastRenewDate strfmt.DateTime `json:"lastRenewDate,omitempty"`

		NextPaymentDate strfmt.DateTime `json:"nextPaymentDate,omitempty"`

		NextRenewDate strfmt.DateTime `json:"nextRenewDate,omitempty"`

		NextRenewalAmount float32 `json:"nextRenewalAmount,omitempty"`

		OfferFid string `json:"offerFid,omitempty"`

		PaidRenewals int32 `json:"paidRenewals,omitempty"`

		PaidUntil strfmt.DateTime `json:"paidUntil,omitempty"`

		ParentFid string `json:"parentFid,omitempty"`

		PriceFid string `json:"priceFid,omitempty"`

		ProductFid string `json:"productFid,omitempty"`

		ProductManagerType string `json:"productManagerType,omitempty"`

		Quantity int32 `json:"quantity,omitempty"`

		RenewDate strfmt.DateTime `json:"renewDate,omitempty"`

		RenewalAdvanceDays int32 `json:"renewalAdvanceDays,omitempty"`

		SetupAmount float32 `json:"setupAmount,omitempty"`

		SetupDiscount float32 `json:"setupDiscount,omitempty"`

		ShouldCancel bool `json:"shouldCancel,omitempty"`

		ShouldSuspend bool `json:"shouldSuspend,omitempty"`

		SkuFid string `json:"skuFid,omitempty"`

		SourceFid string `json:"sourceFid,omitempty"`

		StartDate strfmt.DateTime `json:"startDate,omitempty"`

		Status PurchaseStatus `json:"status,omitempty"`

		SuspendDays int32 `json:"suspendDays,omitempty"`

		SuspendReason string `json:"suspendReason,omitempty"`

		TaxAmount float32 `json:"taxAmount,omitempty"`

		TotalAmount float32 `json:"totalAmount,omitempty"`

		TotalRenewals int32 `json:"totalRenewals,omitempty"`

		TrialEndDate strfmt.DateTime `json:"trialEndDate,omitempty"`

		TrialStartDate strfmt.DateTime `json:"trialStartDate,omitempty"`

		UniqueReference string `json:"uniqueReference,omitempty"`
	}

	dataAO1.Amount = m.Amount

	dataAO1.AutoCancelDate = m.AutoCancelDate

	dataAO1.AutoCharge = m.AutoCharge

	dataAO1.AutoSuspendDate = m.AutoSuspendDate

	dataAO1.CancelDays = m.CancelDays

	dataAO1.CancelReason = m.CancelReason

	dataAO1.Currency = m.Currency

	dataAO1.Cycle = m.Cycle

	dataAO1.DateCancelled = m.DateCancelled

	dataAO1.DateCreated = m.DateCreated

	dataAO1.DateInactive = m.DateInactive

	dataAO1.DateModified = m.DateModified

	dataAO1.DateStateChanged = m.DateStateChanged

	dataAO1.DateSuspended = m.DateSuspended

	dataAO1.DateUpgraded = m.DateUpgraded

	dataAO1.Discount = m.Discount

	dataAO1.EndDate = m.EndDate

	dataAO1.ExternalReference = m.ExternalReference

	dataAO1.Identity = m.Identity

	dataAO1.InvoiceFid = m.InvoiceFid

	dataAO1.IsPaid = m.IsPaid

	dataAO1.LastRenewDate = m.LastRenewDate

	dataAO1.NextPaymentDate = m.NextPaymentDate

	dataAO1.NextRenewDate = m.NextRenewDate

	dataAO1.NextRenewalAmount = m.NextRenewalAmount

	dataAO1.OfferFid = m.OfferFid

	dataAO1.PaidRenewals = m.PaidRenewals

	dataAO1.PaidUntil = m.PaidUntil

	dataAO1.ParentFid = m.ParentFid

	dataAO1.PriceFid = m.PriceFid

	dataAO1.ProductFid = m.ProductFid

	dataAO1.ProductManagerType = m.ProductManagerType

	dataAO1.Quantity = m.Quantity

	dataAO1.RenewDate = m.RenewDate

	dataAO1.RenewalAdvanceDays = m.RenewalAdvanceDays

	dataAO1.SetupAmount = m.SetupAmount

	dataAO1.SetupDiscount = m.SetupDiscount

	dataAO1.ShouldCancel = m.ShouldCancel

	dataAO1.ShouldSuspend = m.ShouldSuspend

	dataAO1.SkuFid = m.SkuFid

	dataAO1.SourceFid = m.SourceFid

	dataAO1.StartDate = m.StartDate

	dataAO1.Status = m.Status

	dataAO1.SuspendDays = m.SuspendDays

	dataAO1.SuspendReason = m.SuspendReason

	dataAO1.TaxAmount = m.TaxAmount

	dataAO1.TotalAmount = m.TotalAmount

	dataAO1.TotalRenewals = m.TotalRenewals

	dataAO1.TrialEndDate = m.TrialEndDate

	dataAO1.TrialStartDate = m.TrialStartDate

	dataAO1.UniqueReference = m.UniqueReference

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this subscription
func (m *Subscription) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoCancelDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoSuspendDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCancelled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateInactive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStateChanged(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateSuspended(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateUpgraded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRenewDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextPaymentDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextRenewDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaidUntil(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenewDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrialEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrialStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) validateAutoCancelDate(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoCancelDate) { // not required
		return nil
	}

	if err := validate.FormatOf("autoCancelDate", "body", "date-time", m.AutoCancelDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateAutoSuspendDate(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoSuspendDate) { // not required
		return nil
	}

	if err := validate.FormatOf("autoSuspendDate", "body", "date-time", m.AutoSuspendDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateDateCancelled(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCancelled) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCancelled", "body", "date-time", m.DateCancelled.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateDateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateDateInactive(formats strfmt.Registry) error {

	if swag.IsZero(m.DateInactive) { // not required
		return nil
	}

	if err := validate.FormatOf("dateInactive", "body", "date-time", m.DateInactive.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateDateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.DateModified) { // not required
		return nil
	}

	if err := validate.FormatOf("dateModified", "body", "date-time", m.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateDateStateChanged(formats strfmt.Registry) error {

	if swag.IsZero(m.DateStateChanged) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStateChanged", "body", "date-time", m.DateStateChanged.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateDateSuspended(formats strfmt.Registry) error {

	if swag.IsZero(m.DateSuspended) { // not required
		return nil
	}

	if err := validate.FormatOf("dateSuspended", "body", "date-time", m.DateSuspended.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateDateUpgraded(formats strfmt.Registry) error {

	if swag.IsZero(m.DateUpgraded) { // not required
		return nil
	}

	if err := validate.FormatOf("dateUpgraded", "body", "date-time", m.DateUpgraded.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateLastRenewDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastRenewDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastRenewDate", "body", "date-time", m.LastRenewDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateNextPaymentDate(formats strfmt.Registry) error {

	if swag.IsZero(m.NextPaymentDate) { // not required
		return nil
	}

	if err := validate.FormatOf("nextPaymentDate", "body", "date-time", m.NextPaymentDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateNextRenewDate(formats strfmt.Registry) error {

	if swag.IsZero(m.NextRenewDate) { // not required
		return nil
	}

	if err := validate.FormatOf("nextRenewDate", "body", "date-time", m.NextRenewDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validatePaidUntil(formats strfmt.Registry) error {

	if swag.IsZero(m.PaidUntil) { // not required
		return nil
	}

	if err := validate.FormatOf("paidUntil", "body", "date-time", m.PaidUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateRenewDate(formats strfmt.Registry) error {

	if swag.IsZero(m.RenewDate) { // not required
		return nil
	}

	if err := validate.FormatOf("renewDate", "body", "date-time", m.RenewDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *Subscription) validateTrialEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.TrialEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("trialEndDate", "body", "date-time", m.TrialEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateTrialStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.TrialStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("trialStartDate", "body", "date-time", m.TrialStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this subscription based on the context it is used
func (m *Subscription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscription) UnmarshalBinary(b []byte) error {
	var res Subscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
