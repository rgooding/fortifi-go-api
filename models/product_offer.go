// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductOffer Generic Response
//
// swagger:model ProductOffer
type ProductOffer struct {
	Entity

	// apply fid
	ApplyFid string `json:"applyFid,omitempty"`

	// coupon code
	CouponCode string `json:"couponCode,omitempty"`

	// Interval in ISO 8601 standard
	Cycle string `json:"cycle,omitempty"`

	// discount amount
	DiscountAmount float32 `json:"discountAmount,omitempty"`

	// discount type
	DiscountType DiscountType `json:"discountType,omitempty"`

	// Time in ISO 8601 standard with optional fractions of a second e.g 2015-12-05T13:11:59.888Z
	// Format: date-time
	ExpiryTime strfmt.DateTime `json:"expiryTime,omitempty"`

	// max usages
	MaxUsages int32 `json:"maxUsages,omitempty"`

	// Interval in ISO 8601 standard
	Period string `json:"period,omitempty"`

	// restrictive
	Restrictive bool `json:"restrictive,omitempty"`

	// setup discount amount
	SetupDiscountAmount float32 `json:"setupDiscountAmount,omitempty"`

	// setup discount type
	SetupDiscountType DiscountType `json:"setupDiscountType,omitempty"`

	// term
	Term int32 `json:"term,omitempty"`

	// term type
	TermType CycleTermType `json:"termType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ProductOffer) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Entity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Entity = aO0

	// AO1
	var dataAO1 struct {
		ApplyFid string `json:"applyFid,omitempty"`

		CouponCode string `json:"couponCode,omitempty"`

		Cycle string `json:"cycle,omitempty"`

		DiscountAmount float32 `json:"discountAmount,omitempty"`

		DiscountType DiscountType `json:"discountType,omitempty"`

		ExpiryTime strfmt.DateTime `json:"expiryTime,omitempty"`

		MaxUsages int32 `json:"maxUsages,omitempty"`

		Period string `json:"period,omitempty"`

		Restrictive bool `json:"restrictive,omitempty"`

		SetupDiscountAmount float32 `json:"setupDiscountAmount,omitempty"`

		SetupDiscountType DiscountType `json:"setupDiscountType,omitempty"`

		Term int32 `json:"term,omitempty"`

		TermType CycleTermType `json:"termType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ApplyFid = dataAO1.ApplyFid

	m.CouponCode = dataAO1.CouponCode

	m.Cycle = dataAO1.Cycle

	m.DiscountAmount = dataAO1.DiscountAmount

	m.DiscountType = dataAO1.DiscountType

	m.ExpiryTime = dataAO1.ExpiryTime

	m.MaxUsages = dataAO1.MaxUsages

	m.Period = dataAO1.Period

	m.Restrictive = dataAO1.Restrictive

	m.SetupDiscountAmount = dataAO1.SetupDiscountAmount

	m.SetupDiscountType = dataAO1.SetupDiscountType

	m.Term = dataAO1.Term

	m.TermType = dataAO1.TermType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ProductOffer) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ApplyFid string `json:"applyFid,omitempty"`

		CouponCode string `json:"couponCode,omitempty"`

		Cycle string `json:"cycle,omitempty"`

		DiscountAmount float32 `json:"discountAmount,omitempty"`

		DiscountType DiscountType `json:"discountType,omitempty"`

		ExpiryTime strfmt.DateTime `json:"expiryTime,omitempty"`

		MaxUsages int32 `json:"maxUsages,omitempty"`

		Period string `json:"period,omitempty"`

		Restrictive bool `json:"restrictive,omitempty"`

		SetupDiscountAmount float32 `json:"setupDiscountAmount,omitempty"`

		SetupDiscountType DiscountType `json:"setupDiscountType,omitempty"`

		Term int32 `json:"term,omitempty"`

		TermType CycleTermType `json:"termType,omitempty"`
	}

	dataAO1.ApplyFid = m.ApplyFid

	dataAO1.CouponCode = m.CouponCode

	dataAO1.Cycle = m.Cycle

	dataAO1.DiscountAmount = m.DiscountAmount

	dataAO1.DiscountType = m.DiscountType

	dataAO1.ExpiryTime = m.ExpiryTime

	dataAO1.MaxUsages = m.MaxUsages

	dataAO1.Period = m.Period

	dataAO1.Restrictive = m.Restrictive

	dataAO1.SetupDiscountAmount = m.SetupDiscountAmount

	dataAO1.SetupDiscountType = m.SetupDiscountType

	dataAO1.Term = m.Term

	dataAO1.TermType = m.TermType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this product offer
func (m *ProductOffer) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetupDiscountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductOffer) validateDiscountType(formats strfmt.Registry) error {

	if swag.IsZero(m.DiscountType) { // not required
		return nil
	}

	if err := m.DiscountType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("discountType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("discountType")
		}
		return err
	}

	return nil
}

func (m *ProductOffer) validateExpiryTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpiryTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expiryTime", "body", "date-time", m.ExpiryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductOffer) validateSetupDiscountType(formats strfmt.Registry) error {

	if swag.IsZero(m.SetupDiscountType) { // not required
		return nil
	}

	if err := m.SetupDiscountType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("setupDiscountType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("setupDiscountType")
		}
		return err
	}

	return nil
}

func (m *ProductOffer) validateTermType(formats strfmt.Registry) error {

	if swag.IsZero(m.TermType) { // not required
		return nil
	}

	if err := m.TermType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("termType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("termType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this product offer based on the context it is used
func (m *ProductOffer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiscountType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetupDiscountType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTermType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductOffer) contextValidateDiscountType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.DiscountType) { // not required
		return nil
	}

	if err := m.DiscountType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("discountType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("discountType")
		}
		return err
	}

	return nil
}

func (m *ProductOffer) contextValidateSetupDiscountType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SetupDiscountType) { // not required
		return nil
	}

	if err := m.SetupDiscountType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("setupDiscountType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("setupDiscountType")
		}
		return err
	}

	return nil
}

func (m *ProductOffer) contextValidateTermType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.TermType) { // not required
		return nil
	}

	if err := m.TermType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("termType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("termType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductOffer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductOffer) UnmarshalBinary(b []byte) error {
	var res ProductOffer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
