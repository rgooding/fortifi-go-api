// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CancelFlowState Cancel Flow State
//
// swagger:model CancelFlowState
type CancelFlowState struct {
	Entity

	// choices
	Choices []*CancelFunnelDecision `json:"choices"`

	// current step
	CurrentStep string `json:"currentStep,omitempty"`

	// customer fid
	CustomerFid string `json:"customerFid,omitempty"`

	// initiated by fid
	InitiatedByFid string `json:"initiatedByFid,omitempty"`

	// is complete
	IsComplete bool `json:"isComplete,omitempty"`

	// step data
	StepData *CancelFunnelStep `json:"stepData,omitempty"`

	// subscription fid
	SubscriptionFid string `json:"subscriptionFid,omitempty"`

	// unique code
	UniqueCode string `json:"uniqueCode,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CancelFlowState) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Entity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Entity = aO0

	// AO1
	var dataAO1 struct {
		Choices []*CancelFunnelDecision `json:"choices"`

		CurrentStep string `json:"currentStep,omitempty"`

		CustomerFid string `json:"customerFid,omitempty"`

		InitiatedByFid string `json:"initiatedByFid,omitempty"`

		IsComplete bool `json:"isComplete,omitempty"`

		StepData *CancelFunnelStep `json:"stepData,omitempty"`

		SubscriptionFid string `json:"subscriptionFid,omitempty"`

		UniqueCode string `json:"uniqueCode,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Choices = dataAO1.Choices

	m.CurrentStep = dataAO1.CurrentStep

	m.CustomerFid = dataAO1.CustomerFid

	m.InitiatedByFid = dataAO1.InitiatedByFid

	m.IsComplete = dataAO1.IsComplete

	m.StepData = dataAO1.StepData

	m.SubscriptionFid = dataAO1.SubscriptionFid

	m.UniqueCode = dataAO1.UniqueCode

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CancelFlowState) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Choices []*CancelFunnelDecision `json:"choices"`

		CurrentStep string `json:"currentStep,omitempty"`

		CustomerFid string `json:"customerFid,omitempty"`

		InitiatedByFid string `json:"initiatedByFid,omitempty"`

		IsComplete bool `json:"isComplete,omitempty"`

		StepData *CancelFunnelStep `json:"stepData,omitempty"`

		SubscriptionFid string `json:"subscriptionFid,omitempty"`

		UniqueCode string `json:"uniqueCode,omitempty"`
	}

	dataAO1.Choices = m.Choices

	dataAO1.CurrentStep = m.CurrentStep

	dataAO1.CustomerFid = m.CustomerFid

	dataAO1.InitiatedByFid = m.InitiatedByFid

	dataAO1.IsComplete = m.IsComplete

	dataAO1.StepData = m.StepData

	dataAO1.SubscriptionFid = m.SubscriptionFid

	dataAO1.UniqueCode = m.UniqueCode

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this cancel flow state
func (m *CancelFlowState) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChoices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStepData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CancelFlowState) validateChoices(formats strfmt.Registry) error {

	if swag.IsZero(m.Choices) { // not required
		return nil
	}

	for i := 0; i < len(m.Choices); i++ {
		if swag.IsZero(m.Choices[i]) { // not required
			continue
		}

		if m.Choices[i] != nil {
			if err := m.Choices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("choices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("choices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CancelFlowState) validateStepData(formats strfmt.Registry) error {

	if swag.IsZero(m.StepData) { // not required
		return nil
	}

	if m.StepData != nil {
		if err := m.StepData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stepData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stepData")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cancel flow state based on the context it is used
func (m *CancelFlowState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChoices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStepData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CancelFlowState) contextValidateChoices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Choices); i++ {

		if m.Choices[i] != nil {

			if swag.IsZero(m.Choices[i]) { // not required
				return nil
			}

			if err := m.Choices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("choices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("choices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CancelFlowState) contextValidateStepData(ctx context.Context, formats strfmt.Registry) error {

	if m.StepData != nil {

		if swag.IsZero(m.StepData) { // not required
			return nil
		}

		if err := m.StepData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stepData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stepData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CancelFlowState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CancelFlowState) UnmarshalBinary(b []byte) error {
	var res CancelFlowState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
