// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Ticket Generic Response
//
// swagger:model Ticket
type Ticket struct {
	Entity

	// agent fid
	AgentFid string `json:"agentFid,omitempty"`

	// attachments
	Attachments int64 `json:"attachments,omitempty"`

	// bcc
	Bcc string `json:"bcc,omitempty"`

	// cc
	Cc string `json:"cc,omitempty"`

	// company fid
	CompanyFid string `json:"companyFid,omitempty"`

	// customer fid
	CustomerFid string `json:"customerFid,omitempty"`

	// date created
	DateCreated int64 `json:"dateCreated,omitempty"`

	// date modified
	DateModified int64 `json:"dateModified,omitempty"`

	// department fid
	DepartmentFid string `json:"departmentFid,omitempty"`

	// hash
	Hash string `json:"hash,omitempty"`

	// impact
	Impact int64 `json:"impact,omitempty"`

	// inbound email
	InboundEmail string `json:"inboundEmail,omitempty"`

	// inbound name
	InboundName string `json:"inboundName,omitempty"`

	// is spam
	IsSpam int64 `json:"isSpam,omitempty"`

	// language
	Language string `json:"language,omitempty"`

	// last reply received time
	LastReplyReceivedTime int64 `json:"lastReplyReceivedTime,omitempty"`

	// last reply sent time
	LastReplySentTime int64 `json:"lastReplySentTime,omitempty"`

	// locked
	Locked bool `json:"locked,omitempty"`

	// locked by fid
	LockedByFid string `json:"lockedByFid,omitempty"`

	// outbound email
	OutboundEmail string `json:"outboundEmail,omitempty"`

	// outbound name
	OutboundName string `json:"outboundName,omitempty"`

	// post count
	PostCount int64 `json:"postCount,omitempty"`

	// priority
	Priority int64 `json:"priority,omitempty"`

	// priority adjustment
	PriorityAdjustment int64 `json:"priorityAdjustment,omitempty"`

	// queue fid
	QueueFid string `json:"queueFid,omitempty"`

	// resolve target time
	ResolveTargetTime int64 `json:"resolveTargetTime,omitempty"`

	// response target time
	ResponseTargetTime int64 `json:"responseTargetTime,omitempty"`

	// restricted access
	RestrictedAccess bool `json:"restrictedAccess,omitempty"`

	// sla fid
	SLAFid string `json:"slaFid,omitempty"`

	// status
	Status int64 `json:"status,omitempty"`

	// ticket type
	TicketType string `json:"ticketType,omitempty"`

	// tier
	Tier int64 `json:"tier,omitempty"`

	// urgency
	Urgency int64 `json:"urgency,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Ticket) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Entity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Entity = aO0

	// AO1
	var dataAO1 struct {
		AgentFid string `json:"agentFid,omitempty"`

		Attachments int64 `json:"attachments,omitempty"`

		Bcc string `json:"bcc,omitempty"`

		Cc string `json:"cc,omitempty"`

		CompanyFid string `json:"companyFid,omitempty"`

		CustomerFid string `json:"customerFid,omitempty"`

		DateCreated int64 `json:"dateCreated,omitempty"`

		DateModified int64 `json:"dateModified,omitempty"`

		DepartmentFid string `json:"departmentFid,omitempty"`

		Hash string `json:"hash,omitempty"`

		Impact int64 `json:"impact,omitempty"`

		InboundEmail string `json:"inboundEmail,omitempty"`

		InboundName string `json:"inboundName,omitempty"`

		IsSpam int64 `json:"isSpam,omitempty"`

		Language string `json:"language,omitempty"`

		LastReplyReceivedTime int64 `json:"lastReplyReceivedTime,omitempty"`

		LastReplySentTime int64 `json:"lastReplySentTime,omitempty"`

		Locked bool `json:"locked,omitempty"`

		LockedByFid string `json:"lockedByFid,omitempty"`

		OutboundEmail string `json:"outboundEmail,omitempty"`

		OutboundName string `json:"outboundName,omitempty"`

		PostCount int64 `json:"postCount,omitempty"`

		Priority int64 `json:"priority,omitempty"`

		PriorityAdjustment int64 `json:"priorityAdjustment,omitempty"`

		QueueFid string `json:"queueFid,omitempty"`

		ResolveTargetTime int64 `json:"resolveTargetTime,omitempty"`

		ResponseTargetTime int64 `json:"responseTargetTime,omitempty"`

		RestrictedAccess bool `json:"restrictedAccess,omitempty"`

		SLAFid string `json:"slaFid,omitempty"`

		Status int64 `json:"status,omitempty"`

		TicketType string `json:"ticketType,omitempty"`

		Tier int64 `json:"tier,omitempty"`

		Urgency int64 `json:"urgency,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AgentFid = dataAO1.AgentFid

	m.Attachments = dataAO1.Attachments

	m.Bcc = dataAO1.Bcc

	m.Cc = dataAO1.Cc

	m.CompanyFid = dataAO1.CompanyFid

	m.CustomerFid = dataAO1.CustomerFid

	m.DateCreated = dataAO1.DateCreated

	m.DateModified = dataAO1.DateModified

	m.DepartmentFid = dataAO1.DepartmentFid

	m.Hash = dataAO1.Hash

	m.Impact = dataAO1.Impact

	m.InboundEmail = dataAO1.InboundEmail

	m.InboundName = dataAO1.InboundName

	m.IsSpam = dataAO1.IsSpam

	m.Language = dataAO1.Language

	m.LastReplyReceivedTime = dataAO1.LastReplyReceivedTime

	m.LastReplySentTime = dataAO1.LastReplySentTime

	m.Locked = dataAO1.Locked

	m.LockedByFid = dataAO1.LockedByFid

	m.OutboundEmail = dataAO1.OutboundEmail

	m.OutboundName = dataAO1.OutboundName

	m.PostCount = dataAO1.PostCount

	m.Priority = dataAO1.Priority

	m.PriorityAdjustment = dataAO1.PriorityAdjustment

	m.QueueFid = dataAO1.QueueFid

	m.ResolveTargetTime = dataAO1.ResolveTargetTime

	m.ResponseTargetTime = dataAO1.ResponseTargetTime

	m.RestrictedAccess = dataAO1.RestrictedAccess

	m.SLAFid = dataAO1.SLAFid

	m.Status = dataAO1.Status

	m.TicketType = dataAO1.TicketType

	m.Tier = dataAO1.Tier

	m.Urgency = dataAO1.Urgency

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Ticket) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AgentFid string `json:"agentFid,omitempty"`

		Attachments int64 `json:"attachments,omitempty"`

		Bcc string `json:"bcc,omitempty"`

		Cc string `json:"cc,omitempty"`

		CompanyFid string `json:"companyFid,omitempty"`

		CustomerFid string `json:"customerFid,omitempty"`

		DateCreated int64 `json:"dateCreated,omitempty"`

		DateModified int64 `json:"dateModified,omitempty"`

		DepartmentFid string `json:"departmentFid,omitempty"`

		Hash string `json:"hash,omitempty"`

		Impact int64 `json:"impact,omitempty"`

		InboundEmail string `json:"inboundEmail,omitempty"`

		InboundName string `json:"inboundName,omitempty"`

		IsSpam int64 `json:"isSpam,omitempty"`

		Language string `json:"language,omitempty"`

		LastReplyReceivedTime int64 `json:"lastReplyReceivedTime,omitempty"`

		LastReplySentTime int64 `json:"lastReplySentTime,omitempty"`

		Locked bool `json:"locked,omitempty"`

		LockedByFid string `json:"lockedByFid,omitempty"`

		OutboundEmail string `json:"outboundEmail,omitempty"`

		OutboundName string `json:"outboundName,omitempty"`

		PostCount int64 `json:"postCount,omitempty"`

		Priority int64 `json:"priority,omitempty"`

		PriorityAdjustment int64 `json:"priorityAdjustment,omitempty"`

		QueueFid string `json:"queueFid,omitempty"`

		ResolveTargetTime int64 `json:"resolveTargetTime,omitempty"`

		ResponseTargetTime int64 `json:"responseTargetTime,omitempty"`

		RestrictedAccess bool `json:"restrictedAccess,omitempty"`

		SLAFid string `json:"slaFid,omitempty"`

		Status int64 `json:"status,omitempty"`

		TicketType string `json:"ticketType,omitempty"`

		Tier int64 `json:"tier,omitempty"`

		Urgency int64 `json:"urgency,omitempty"`
	}

	dataAO1.AgentFid = m.AgentFid

	dataAO1.Attachments = m.Attachments

	dataAO1.Bcc = m.Bcc

	dataAO1.Cc = m.Cc

	dataAO1.CompanyFid = m.CompanyFid

	dataAO1.CustomerFid = m.CustomerFid

	dataAO1.DateCreated = m.DateCreated

	dataAO1.DateModified = m.DateModified

	dataAO1.DepartmentFid = m.DepartmentFid

	dataAO1.Hash = m.Hash

	dataAO1.Impact = m.Impact

	dataAO1.InboundEmail = m.InboundEmail

	dataAO1.InboundName = m.InboundName

	dataAO1.IsSpam = m.IsSpam

	dataAO1.Language = m.Language

	dataAO1.LastReplyReceivedTime = m.LastReplyReceivedTime

	dataAO1.LastReplySentTime = m.LastReplySentTime

	dataAO1.Locked = m.Locked

	dataAO1.LockedByFid = m.LockedByFid

	dataAO1.OutboundEmail = m.OutboundEmail

	dataAO1.OutboundName = m.OutboundName

	dataAO1.PostCount = m.PostCount

	dataAO1.Priority = m.Priority

	dataAO1.PriorityAdjustment = m.PriorityAdjustment

	dataAO1.QueueFid = m.QueueFid

	dataAO1.ResolveTargetTime = m.ResolveTargetTime

	dataAO1.ResponseTargetTime = m.ResponseTargetTime

	dataAO1.RestrictedAccess = m.RestrictedAccess

	dataAO1.SLAFid = m.SLAFid

	dataAO1.Status = m.Status

	dataAO1.TicketType = m.TicketType

	dataAO1.Tier = m.Tier

	dataAO1.Urgency = m.Urgency

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this ticket
func (m *Ticket) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this ticket based on the context it is used
func (m *Ticket) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Entity
	if err := m.Entity.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Ticket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Ticket) UnmarshalBinary(b []byte) error {
	var res Ticket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
