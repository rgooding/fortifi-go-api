// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OrderConfirmation Generic Response
//
// swagger:model OrderConfirmation
type OrderConfirmation struct {

	// message
	Message string `json:"message,omitempty"`

	// payment account fid
	PaymentAccountFid string `json:"paymentAccountFid,omitempty"`

	// payment mode
	PaymentMode PaymentMode `json:"paymentMode,omitempty"`

	// success
	Success bool `json:"success,omitempty"`
}

// Validate validates this order confirmation
func (m *OrderConfirmation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaymentMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderConfirmation) validatePaymentMode(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentMode) { // not required
		return nil
	}

	if err := m.PaymentMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("paymentMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("paymentMode")
		}
		return err
	}

	return nil
}

// ContextValidate validate this order confirmation based on the context it is used
func (m *OrderConfirmation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePaymentMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderConfirmation) contextValidatePaymentMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentMode) { // not required
		return nil
	}

	if err := m.PaymentMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("paymentMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("paymentMode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderConfirmation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderConfirmation) UnmarshalBinary(b []byte) error {
	var res OrderConfirmation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
