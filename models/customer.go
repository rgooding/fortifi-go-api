// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Customer Customer
//
// swagger:model Customer
type Customer struct {
	Fid

	// account manager fid
	AccountManagerFid string `json:"accountManagerFid,omitempty"`

	// account status
	AccountStatus string `json:"accountStatus,omitempty"`

	// account type
	AccountType string `json:"accountType,omitempty"`

	// affiliate fid
	AffiliateFid string `json:"affiliateFid,omitempty"`

	// affiliate type
	AffiliateType string `json:"affiliateType,omitempty"`

	// billing type
	BillingType string `json:"billingType,omitempty"`

	// campaign fid
	CampaignFid string `json:"campaignFid,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// company fid
	CompanyFid string `json:"companyFid,omitempty"`

	// company number
	CompanyNumber string `json:"companyNumber,omitempty"`

	// continent
	Continent string `json:"continent,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// county
	County string `json:"county,omitempty"`

	// currency
	Currency string `json:"currency,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// external reference
	ExternalReference string `json:"externalReference,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// flags
	Flags *CustomerFlags `json:"flags,omitempty"`

	// foundation fid
	FoundationFid string `json:"foundationFid,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// known IP
	KnownIP string `json:"knownIP,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// lifecycle stage
	LifecycleStage string `json:"lifecycleStage,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// phone number
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// postal
	Postal string `json:"postal,omitempty"`

	// sid1
	Sid1 string `json:"sid1,omitempty"`

	// sid2
	Sid2 string `json:"sid2,omitempty"`

	// sid3
	Sid3 string `json:"sid3,omitempty"`

	// subscription type
	SubscriptionType string `json:"subscriptionType,omitempty"`

	// tax number
	TaxNumber string `json:"taxNumber,omitempty"`

	// timezone
	Timezone string `json:"timezone,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Customer) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Fid
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Fid = aO0

	// AO1
	var dataAO1 struct {
		AccountManagerFid string `json:"accountManagerFid,omitempty"`

		AccountStatus string `json:"accountStatus,omitempty"`

		AccountType string `json:"accountType,omitempty"`

		AffiliateFid string `json:"affiliateFid,omitempty"`

		AffiliateType string `json:"affiliateType,omitempty"`

		BillingType string `json:"billingType,omitempty"`

		CampaignFid string `json:"campaignFid,omitempty"`

		City string `json:"city,omitempty"`

		CompanyFid string `json:"companyFid,omitempty"`

		CompanyNumber string `json:"companyNumber,omitempty"`

		Continent string `json:"continent,omitempty"`

		Country string `json:"country,omitempty"`

		County string `json:"county,omitempty"`

		Currency string `json:"currency,omitempty"`

		DisplayName string `json:"displayName,omitempty"`

		Email string `json:"email,omitempty"`

		ExternalReference string `json:"externalReference,omitempty"`

		FirstName string `json:"firstName,omitempty"`

		Flags *CustomerFlags `json:"flags,omitempty"`

		FoundationFid string `json:"foundationFid,omitempty"`

		ID string `json:"id,omitempty"`

		KnownIP string `json:"knownIP,omitempty"`

		LastName string `json:"lastName,omitempty"`

		LifecycleStage string `json:"lifecycleStage,omitempty"`

		Name string `json:"name,omitempty"`

		Phone string `json:"phone,omitempty"`

		PhoneNumber string `json:"phoneNumber,omitempty"`

		Postal string `json:"postal,omitempty"`

		Sid1 string `json:"sid1,omitempty"`

		Sid2 string `json:"sid2,omitempty"`

		Sid3 string `json:"sid3,omitempty"`

		SubscriptionType string `json:"subscriptionType,omitempty"`

		TaxNumber string `json:"taxNumber,omitempty"`

		Timezone string `json:"timezone,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AccountManagerFid = dataAO1.AccountManagerFid

	m.AccountStatus = dataAO1.AccountStatus

	m.AccountType = dataAO1.AccountType

	m.AffiliateFid = dataAO1.AffiliateFid

	m.AffiliateType = dataAO1.AffiliateType

	m.BillingType = dataAO1.BillingType

	m.CampaignFid = dataAO1.CampaignFid

	m.City = dataAO1.City

	m.CompanyFid = dataAO1.CompanyFid

	m.CompanyNumber = dataAO1.CompanyNumber

	m.Continent = dataAO1.Continent

	m.Country = dataAO1.Country

	m.County = dataAO1.County

	m.Currency = dataAO1.Currency

	m.DisplayName = dataAO1.DisplayName

	m.Email = dataAO1.Email

	m.ExternalReference = dataAO1.ExternalReference

	m.FirstName = dataAO1.FirstName

	m.Flags = dataAO1.Flags

	m.FoundationFid = dataAO1.FoundationFid

	m.ID = dataAO1.ID

	m.KnownIP = dataAO1.KnownIP

	m.LastName = dataAO1.LastName

	m.LifecycleStage = dataAO1.LifecycleStage

	m.Name = dataAO1.Name

	m.Phone = dataAO1.Phone

	m.PhoneNumber = dataAO1.PhoneNumber

	m.Postal = dataAO1.Postal

	m.Sid1 = dataAO1.Sid1

	m.Sid2 = dataAO1.Sid2

	m.Sid3 = dataAO1.Sid3

	m.SubscriptionType = dataAO1.SubscriptionType

	m.TaxNumber = dataAO1.TaxNumber

	m.Timezone = dataAO1.Timezone

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Customer) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Fid)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AccountManagerFid string `json:"accountManagerFid,omitempty"`

		AccountStatus string `json:"accountStatus,omitempty"`

		AccountType string `json:"accountType,omitempty"`

		AffiliateFid string `json:"affiliateFid,omitempty"`

		AffiliateType string `json:"affiliateType,omitempty"`

		BillingType string `json:"billingType,omitempty"`

		CampaignFid string `json:"campaignFid,omitempty"`

		City string `json:"city,omitempty"`

		CompanyFid string `json:"companyFid,omitempty"`

		CompanyNumber string `json:"companyNumber,omitempty"`

		Continent string `json:"continent,omitempty"`

		Country string `json:"country,omitempty"`

		County string `json:"county,omitempty"`

		Currency string `json:"currency,omitempty"`

		DisplayName string `json:"displayName,omitempty"`

		Email string `json:"email,omitempty"`

		ExternalReference string `json:"externalReference,omitempty"`

		FirstName string `json:"firstName,omitempty"`

		Flags *CustomerFlags `json:"flags,omitempty"`

		FoundationFid string `json:"foundationFid,omitempty"`

		ID string `json:"id,omitempty"`

		KnownIP string `json:"knownIP,omitempty"`

		LastName string `json:"lastName,omitempty"`

		LifecycleStage string `json:"lifecycleStage,omitempty"`

		Name string `json:"name,omitempty"`

		Phone string `json:"phone,omitempty"`

		PhoneNumber string `json:"phoneNumber,omitempty"`

		Postal string `json:"postal,omitempty"`

		Sid1 string `json:"sid1,omitempty"`

		Sid2 string `json:"sid2,omitempty"`

		Sid3 string `json:"sid3,omitempty"`

		SubscriptionType string `json:"subscriptionType,omitempty"`

		TaxNumber string `json:"taxNumber,omitempty"`

		Timezone string `json:"timezone,omitempty"`
	}

	dataAO1.AccountManagerFid = m.AccountManagerFid

	dataAO1.AccountStatus = m.AccountStatus

	dataAO1.AccountType = m.AccountType

	dataAO1.AffiliateFid = m.AffiliateFid

	dataAO1.AffiliateType = m.AffiliateType

	dataAO1.BillingType = m.BillingType

	dataAO1.CampaignFid = m.CampaignFid

	dataAO1.City = m.City

	dataAO1.CompanyFid = m.CompanyFid

	dataAO1.CompanyNumber = m.CompanyNumber

	dataAO1.Continent = m.Continent

	dataAO1.Country = m.Country

	dataAO1.County = m.County

	dataAO1.Currency = m.Currency

	dataAO1.DisplayName = m.DisplayName

	dataAO1.Email = m.Email

	dataAO1.ExternalReference = m.ExternalReference

	dataAO1.FirstName = m.FirstName

	dataAO1.Flags = m.Flags

	dataAO1.FoundationFid = m.FoundationFid

	dataAO1.ID = m.ID

	dataAO1.KnownIP = m.KnownIP

	dataAO1.LastName = m.LastName

	dataAO1.LifecycleStage = m.LifecycleStage

	dataAO1.Name = m.Name

	dataAO1.Phone = m.Phone

	dataAO1.PhoneNumber = m.PhoneNumber

	dataAO1.Postal = m.Postal

	dataAO1.Sid1 = m.Sid1

	dataAO1.Sid2 = m.Sid2

	dataAO1.Sid3 = m.Sid3

	dataAO1.SubscriptionType = m.SubscriptionType

	dataAO1.TaxNumber = m.TaxNumber

	dataAO1.Timezone = m.Timezone

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this customer
func (m *Customer) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Fid
	if err := m.Fid.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customer) validateFlags(formats strfmt.Registry) error {

	if swag.IsZero(m.Flags) { // not required
		return nil
	}

	if m.Flags != nil {
		if err := m.Flags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flags")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this customer based on the context it is used
func (m *Customer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Fid
	if err := m.Fid.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customer) contextValidateFlags(ctx context.Context, formats strfmt.Registry) error {

	if m.Flags != nil {

		if swag.IsZero(m.Flags) { // not required
			return nil
		}

		if err := m.Flags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flags")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Customer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Customer) UnmarshalBinary(b []byte) error {
	var res Customer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
