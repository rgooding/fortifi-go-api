// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateInteractionInvitationPayload create interaction invitation payload
//
// swagger:model CreateInteractionInvitationPayload
type CreateInteractionInvitationPayload struct {
	StartInteractionPayload

	// context
	Context interface{} `json:"context,omitempty"`

	// earliest start time
	EarliestStartTime string `json:"earliestStartTime,omitempty"`

	// edges
	Edges string `json:"edges,omitempty"`

	// expiry time
	ExpiryTime string `json:"expiryTime,omitempty"`

	// initial message
	InitialMessage string `json:"initialMessage,omitempty"`

	// journey tracking fid
	JourneyTrackingFid string `json:"journeyTrackingFid,omitempty"`

	// language
	Language string `json:"language,omitempty"`

	// notes
	Notes []*KeyValuePayload `json:"notes"`

	// topic
	Topic string `json:"topic,omitempty"`

	// verification fid
	VerificationFid string `json:"verificationFid,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CreateInteractionInvitationPayload) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StartInteractionPayload
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.StartInteractionPayload = aO0

	// AO1
	var dataAO1 struct {
		Context interface{} `json:"context,omitempty"`

		EarliestStartTime string `json:"earliestStartTime,omitempty"`

		Edges string `json:"edges,omitempty"`

		ExpiryTime string `json:"expiryTime,omitempty"`

		InitialMessage string `json:"initialMessage,omitempty"`

		JourneyTrackingFid string `json:"journeyTrackingFid,omitempty"`

		Language string `json:"language,omitempty"`

		Notes []*KeyValuePayload `json:"notes"`

		Topic string `json:"topic,omitempty"`

		VerificationFid string `json:"verificationFid,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Context = dataAO1.Context

	m.EarliestStartTime = dataAO1.EarliestStartTime

	m.Edges = dataAO1.Edges

	m.ExpiryTime = dataAO1.ExpiryTime

	m.InitialMessage = dataAO1.InitialMessage

	m.JourneyTrackingFid = dataAO1.JourneyTrackingFid

	m.Language = dataAO1.Language

	m.Notes = dataAO1.Notes

	m.Topic = dataAO1.Topic

	m.VerificationFid = dataAO1.VerificationFid

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CreateInteractionInvitationPayload) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.StartInteractionPayload)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Context interface{} `json:"context,omitempty"`

		EarliestStartTime string `json:"earliestStartTime,omitempty"`

		Edges string `json:"edges,omitempty"`

		ExpiryTime string `json:"expiryTime,omitempty"`

		InitialMessage string `json:"initialMessage,omitempty"`

		JourneyTrackingFid string `json:"journeyTrackingFid,omitempty"`

		Language string `json:"language,omitempty"`

		Notes []*KeyValuePayload `json:"notes"`

		Topic string `json:"topic,omitempty"`

		VerificationFid string `json:"verificationFid,omitempty"`
	}

	dataAO1.Context = m.Context

	dataAO1.EarliestStartTime = m.EarliestStartTime

	dataAO1.Edges = m.Edges

	dataAO1.ExpiryTime = m.ExpiryTime

	dataAO1.InitialMessage = m.InitialMessage

	dataAO1.JourneyTrackingFid = m.JourneyTrackingFid

	dataAO1.Language = m.Language

	dataAO1.Notes = m.Notes

	dataAO1.Topic = m.Topic

	dataAO1.VerificationFid = m.VerificationFid

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create interaction invitation payload
func (m *CreateInteractionInvitationPayload) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StartInteractionPayload
	if err := m.StartInteractionPayload.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateInteractionInvitationPayload) validateNotes(formats strfmt.Registry) error {

	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {
		if swag.IsZero(m.Notes[i]) { // not required
			continue
		}

		if m.Notes[i] != nil {
			if err := m.Notes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("notes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create interaction invitation payload based on the context it is used
func (m *CreateInteractionInvitationPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StartInteractionPayload
	if err := m.StartInteractionPayload.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateInteractionInvitationPayload) contextValidateNotes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Notes); i++ {

		if m.Notes[i] != nil {

			if swag.IsZero(m.Notes[i]) { // not required
				return nil
			}

			if err := m.Notes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("notes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateInteractionInvitationPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateInteractionInvitationPayload) UnmarshalBinary(b []byte) error {
	var res CreateInteractionInvitationPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
