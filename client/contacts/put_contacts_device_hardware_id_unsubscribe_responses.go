// Code generated by go-swagger; DO NOT EDIT.

package contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fortifi/go-api/models"
)

// PutContactsDeviceHardwareIDUnsubscribeReader is a Reader for the PutContactsDeviceHardwareIDUnsubscribe structure.
type PutContactsDeviceHardwareIDUnsubscribeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutContactsDeviceHardwareIDUnsubscribeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutContactsDeviceHardwareIDUnsubscribeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPutContactsDeviceHardwareIDUnsubscribeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutContactsDeviceHardwareIDUnsubscribeOK creates a PutContactsDeviceHardwareIDUnsubscribeOK with default headers values
func NewPutContactsDeviceHardwareIDUnsubscribeOK() *PutContactsDeviceHardwareIDUnsubscribeOK {
	return &PutContactsDeviceHardwareIDUnsubscribeOK{}
}

/*
PutContactsDeviceHardwareIDUnsubscribeOK describes a response with status code 200, with default header values.

Device Unsubscribed
*/
type PutContactsDeviceHardwareIDUnsubscribeOK struct {
}

// IsSuccess returns true when this put contacts device hardware Id unsubscribe o k response has a 2xx status code
func (o *PutContactsDeviceHardwareIDUnsubscribeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put contacts device hardware Id unsubscribe o k response has a 3xx status code
func (o *PutContactsDeviceHardwareIDUnsubscribeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put contacts device hardware Id unsubscribe o k response has a 4xx status code
func (o *PutContactsDeviceHardwareIDUnsubscribeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put contacts device hardware Id unsubscribe o k response has a 5xx status code
func (o *PutContactsDeviceHardwareIDUnsubscribeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put contacts device hardware Id unsubscribe o k response a status code equal to that given
func (o *PutContactsDeviceHardwareIDUnsubscribeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put contacts device hardware Id unsubscribe o k response
func (o *PutContactsDeviceHardwareIDUnsubscribeOK) Code() int {
	return 200
}

func (o *PutContactsDeviceHardwareIDUnsubscribeOK) Error() string {
	return fmt.Sprintf("[PUT /contacts/device/{hardwareId}/unsubscribe][%d] putContactsDeviceHardwareIdUnsubscribeOK ", 200)
}

func (o *PutContactsDeviceHardwareIDUnsubscribeOK) String() string {
	return fmt.Sprintf("[PUT /contacts/device/{hardwareId}/unsubscribe][%d] putContactsDeviceHardwareIdUnsubscribeOK ", 200)
}

func (o *PutContactsDeviceHardwareIDUnsubscribeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutContactsDeviceHardwareIDUnsubscribeDefault creates a PutContactsDeviceHardwareIDUnsubscribeDefault with default headers values
func NewPutContactsDeviceHardwareIDUnsubscribeDefault(code int) *PutContactsDeviceHardwareIDUnsubscribeDefault {
	return &PutContactsDeviceHardwareIDUnsubscribeDefault{
		_statusCode: code,
	}
}

/*
PutContactsDeviceHardwareIDUnsubscribeDefault describes a response with status code -1, with default header values.

Error
*/
type PutContactsDeviceHardwareIDUnsubscribeDefault struct {
	_statusCode int

	Payload *models.Envelope
}

// IsSuccess returns true when this put contacts device hardware ID unsubscribe default response has a 2xx status code
func (o *PutContactsDeviceHardwareIDUnsubscribeDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this put contacts device hardware ID unsubscribe default response has a 3xx status code
func (o *PutContactsDeviceHardwareIDUnsubscribeDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this put contacts device hardware ID unsubscribe default response has a 4xx status code
func (o *PutContactsDeviceHardwareIDUnsubscribeDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this put contacts device hardware ID unsubscribe default response has a 5xx status code
func (o *PutContactsDeviceHardwareIDUnsubscribeDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this put contacts device hardware ID unsubscribe default response a status code equal to that given
func (o *PutContactsDeviceHardwareIDUnsubscribeDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the put contacts device hardware ID unsubscribe default response
func (o *PutContactsDeviceHardwareIDUnsubscribeDefault) Code() int {
	return o._statusCode
}

func (o *PutContactsDeviceHardwareIDUnsubscribeDefault) Error() string {
	return fmt.Sprintf("[PUT /contacts/device/{hardwareId}/unsubscribe][%d] PutContactsDeviceHardwareIDUnsubscribe default  %+v", o._statusCode, o.Payload)
}

func (o *PutContactsDeviceHardwareIDUnsubscribeDefault) String() string {
	return fmt.Sprintf("[PUT /contacts/device/{hardwareId}/unsubscribe][%d] PutContactsDeviceHardwareIDUnsubscribe default  %+v", o._statusCode, o.Payload)
}

func (o *PutContactsDeviceHardwareIDUnsubscribeDefault) GetPayload() *models.Envelope {
	return o.Payload
}

func (o *PutContactsDeviceHardwareIDUnsubscribeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Envelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
