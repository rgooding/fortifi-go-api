// Code generated by go-swagger; DO NOT EDIT.

package interactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new interactions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for interactions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetInteractionsInteractionFid(params *GetInteractionsInteractionFidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInteractionsInteractionFidOK, error)

	GetInteractionsInteractionFidMessages(params *GetInteractionsInteractionFidMessagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInteractionsInteractionFidMessagesOK, error)

	GetInteractionsInviteInviteCodeStatus(params *GetInteractionsInviteInviteCodeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInteractionsInviteInviteCodeStatusOK, error)

	PostInteractionsInteractionFidAttachment(params *PostInteractionsInteractionFidAttachmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidAttachmentOK, error)

	PostInteractionsInteractionFidClientConnected(params *PostInteractionsInteractionFidClientConnectedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidClientConnectedOK, error)

	PostInteractionsInteractionFidClientDisconnected(params *PostInteractionsInteractionFidClientDisconnectedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidClientDisconnectedOK, error)

	PostInteractionsInteractionFidCustomerClosed(params *PostInteractionsInteractionFidCustomerClosedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidCustomerClosedOK, error)

	PostInteractionsInteractionFidFeedback(params *PostInteractionsInteractionFidFeedbackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidFeedbackOK, error)

	PostInteractionsInteractionFidMessage(params *PostInteractionsInteractionFidMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidMessageOK, error)

	PostInteractionsInvite(params *PostInteractionsInviteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInviteOK, error)

	PostInteractionsInviteInviteCode(params *PostInteractionsInviteInviteCodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInviteInviteCodeOK, error)

	PostInteractionsJourney(params *PostInteractionsJourneyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsJourneyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetInteractionsInteractionFid gets an interaction
*/
func (a *Client) GetInteractionsInteractionFid(params *GetInteractionsInteractionFidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInteractionsInteractionFidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInteractionsInteractionFidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInteractionsInteractionFid",
		Method:             "GET",
		PathPattern:        "/interactions/{interactionFid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInteractionsInteractionFidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInteractionsInteractionFidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInteractionsInteractionFidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetInteractionsInteractionFidMessages gets all messages on an interaction
*/
func (a *Client) GetInteractionsInteractionFidMessages(params *GetInteractionsInteractionFidMessagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInteractionsInteractionFidMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInteractionsInteractionFidMessagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInteractionsInteractionFidMessages",
		Method:             "GET",
		PathPattern:        "/interactions/{interactionFid}/messages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInteractionsInteractionFidMessagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInteractionsInteractionFidMessagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInteractionsInteractionFidMessagesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetInteractionsInviteInviteCodeStatus gets an interaction invite status
*/
func (a *Client) GetInteractionsInviteInviteCodeStatus(params *GetInteractionsInviteInviteCodeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInteractionsInviteInviteCodeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInteractionsInviteInviteCodeStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInteractionsInviteInviteCodeStatus",
		Method:             "GET",
		PathPattern:        "/interactions/invite/{inviteCode}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInteractionsInviteInviteCodeStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInteractionsInviteInviteCodeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInteractionsInviteInviteCodeStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostInteractionsInteractionFidAttachment creates an interaction attachment
*/
func (a *Client) PostInteractionsInteractionFidAttachment(params *PostInteractionsInteractionFidAttachmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInteractionsInteractionFidAttachmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostInteractionsInteractionFidAttachment",
		Method:             "POST",
		PathPattern:        "/interactions/{interactionFid}/attachment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInteractionsInteractionFidAttachmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInteractionsInteractionFidAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostInteractionsInteractionFidAttachmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostInteractionsInteractionFidClientConnected as client has connected to the interaction
*/
func (a *Client) PostInteractionsInteractionFidClientConnected(params *PostInteractionsInteractionFidClientConnectedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidClientConnectedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInteractionsInteractionFidClientConnectedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostInteractionsInteractionFidClientConnected",
		Method:             "POST",
		PathPattern:        "/interactions/{interactionFid}/client/connected",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInteractionsInteractionFidClientConnectedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInteractionsInteractionFidClientConnectedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostInteractionsInteractionFidClientConnectedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostInteractionsInteractionFidClientDisconnected as client has disconnected from the interaction
*/
func (a *Client) PostInteractionsInteractionFidClientDisconnected(params *PostInteractionsInteractionFidClientDisconnectedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidClientDisconnectedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInteractionsInteractionFidClientDisconnectedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostInteractionsInteractionFidClientDisconnected",
		Method:             "POST",
		PathPattern:        "/interactions/{interactionFid}/client/disconnected",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInteractionsInteractionFidClientDisconnectedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInteractionsInteractionFidClientDisconnectedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostInteractionsInteractionFidClientDisconnectedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostInteractionsInteractionFidCustomerClosed thes customer has purposely closed the interaction
*/
func (a *Client) PostInteractionsInteractionFidCustomerClosed(params *PostInteractionsInteractionFidCustomerClosedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidCustomerClosedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInteractionsInteractionFidCustomerClosedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostInteractionsInteractionFidCustomerClosed",
		Method:             "POST",
		PathPattern:        "/interactions/{interactionFid}/customerClosed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInteractionsInteractionFidCustomerClosedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInteractionsInteractionFidCustomerClosedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostInteractionsInteractionFidCustomerClosedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostInteractionsInteractionFidFeedback submits feedback to an interaction
*/
func (a *Client) PostInteractionsInteractionFidFeedback(params *PostInteractionsInteractionFidFeedbackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidFeedbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInteractionsInteractionFidFeedbackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostInteractionsInteractionFidFeedback",
		Method:             "POST",
		PathPattern:        "/interactions/{interactionFid}/feedback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInteractionsInteractionFidFeedbackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInteractionsInteractionFidFeedbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostInteractionsInteractionFidFeedbackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostInteractionsInteractionFidMessage adds a message to a interaction
*/
func (a *Client) PostInteractionsInteractionFidMessage(params *PostInteractionsInteractionFidMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInteractionFidMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInteractionsInteractionFidMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostInteractionsInteractionFidMessage",
		Method:             "POST",
		PathPattern:        "/interactions/{interactionFid}/message",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInteractionsInteractionFidMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInteractionsInteractionFidMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostInteractionsInteractionFidMessageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostInteractionsInvite creates an interaction invite
*/
func (a *Client) PostInteractionsInvite(params *PostInteractionsInviteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInteractionsInviteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostInteractionsInvite",
		Method:             "POST",
		PathPattern:        "/interactions/invite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInteractionsInviteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInteractionsInviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostInteractionsInviteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostInteractionsInviteInviteCode accepts an interaction invite
*/
func (a *Client) PostInteractionsInviteInviteCode(params *PostInteractionsInviteInviteCodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsInviteInviteCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInteractionsInviteInviteCodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostInteractionsInviteInviteCode",
		Method:             "POST",
		PathPattern:        "/interactions/invite/{inviteCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInteractionsInviteInviteCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInteractionsInviteInviteCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostInteractionsInviteInviteCodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostInteractionsJourney creates a customer journey
*/
func (a *Client) PostInteractionsJourney(params *PostInteractionsJourneyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInteractionsJourneyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInteractionsJourneyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostInteractionsJourney",
		Method:             "POST",
		PathPattern:        "/interactions/journey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInteractionsJourneyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInteractionsJourneyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostInteractionsJourneyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
